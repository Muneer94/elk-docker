---

- name: Pull PostgreSQL image
  docker_image:
    name: "{{ postgres_docker_image }}"
    tag: "{{ postgres_docker_image_tag }}"

- name: Create data container
  docker_container:
    name: "{{ postgres_container_name }}-data"
    image: "{{ postgres_docker_image }}:{{ postgres_docker_image_tag }}"
    state: present

- name: Run PostgreSQL container
  docker_container:
    name: "{{ postgres_container_name }}"
    image: "{{ postgres_docker_image }}:{{ postgres_docker_image_tag }}"
    restart_policy: always
    state: started
    memory: "{{ container_memory_limit | default(omit) }}"
    volumes_from:
      - "{{ postgres_container_name }}-data"
    ports:
      - "{{ postgres_port }}:5432"
    networks: "{{ postgres_networks }}"
    env:
      POSTGRES_DB: "{{ postgres_database }}"
      POSTGRES_USER: "{{ postgres_user }}"
      POSTGRES_PASSWORD: "{{ postgres_password }}"
  register: postgres_container

- name: Wait until PostgreSQL starts up
  wait_for: port={{ postgres_port }} delay=5
  when: postgres_container.changed

- name: Ensure Sonar container has an up-to-date configuration
  docker_container:
    name: "{{ sonar_container_name }}"
    image: "{{ sonar_docker_image }}:{{ sonar_docker_image_tag }}"
    state: started
    restart: yes
    links:
      - "{{ postgres_container_name }}:postgres"
    ports:
      - "{{ sonar_port }}:9000"
      - "{{ sonar_port_2 }}:9092"
    volumes:
      - "{{ sonar_data_path }}:/opt/sonarqube/data"
      - "{{ sonar_conf_path }}:/opt/sonarqube/conf"
      - "{{ sonar_extensions_path }}:/opt/sonarqube/extensions"
      - "{{ sonar_logs_path }}:/opt/sonarqube/logs"
    command: "{{ sonar_command_var }}"
    env:
      SONARQUBE_JDBC_URL: "{{ sonar_jdbc_url }}"
      SONARQUBE_JDBC_USERNAME: "{{ postgres_user }}"
      SONARQUBE_JDBC_PASSWORD: "{{ postgres_password }}"

- name: Make sure Sonar is responding on the configured port.
  wait_for: port={{ sonar_port }} delay=3 timeout=300