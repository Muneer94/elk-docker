def util;

pipeline {
   agent any
   stages {
      stage('one') {
        steps {
            script {
                util = load("${env.WORKSPACE}/scripts/groovy/checkout.groovy")
                util.runStep1()
            }
        }
      }
      post {
        util.xxxx
      }

      stage('two') {
        steps {
            script {
                util = load("${env.WORKSPACE}/scripts/build_util.groovy")
                util.runStep2()
            }
        }
      }
   }
}

node('master') {
    git url: "git@github.com:Muneer94/elk-docker.git", branch: 'master'
    stage('scm') {
        checkout scm
    }
    stage('build') {
        withMaven(jdk: 'JDK9.0.1', maven: 'Maven3.5.2') {
            sh 'mvn clean install'
        }
    }
}



pipeline {
    agent any
    // tools {
    //     maven 'MAVEN_PATH'
    //     jdk 'jdk8'
    // }
    stages {
        stage("Checkout Code") {
            steps {
                git branch: 'master',
                url: "https://github.com/iamvickyav/spring-boot-data-H2-embedded.git"
            }
        }

        // stage("Code coverage") {
        //    steps {
        //        jacoco(
        //             execPattern: '**/target/**.exec',
        //             classPattern: '**/target/classes',
        //             sourcePattern: '**/src',
        //             inclusionPattern: 'com/iamvickyav/**',
        //             changeBuildStatus: true,
        //             minimumInstructionCoverage: '30',
        //             maximumInstructionCoverage: '80')
        //        }
        //    }
        }
 }

#!/usr/bin/env groovy

import jenkins.model.*;
import groovy.json.*

pipeline {
    agent any
    environment {
        TEST_PREFIX = "test-IMAGE"
        TEST_IMAGE = "${env.TEST_PREFIX}:${env.BUILD_NUMBER}"
        TEST_CONTAINER = "${env.TEST_PREFIX}-${env.BUILD_NUMBER}"
        REGISTRY_ADDRESS = "my.registry.address.com"

        COMPOSE_FILE = "docker-compose.yml"
        REGISTRY_AUTH = credentials("docker-registry")
        STACK_PREFIX = "my-project-stack-name"
    }
    options {
        ansiColor('xterm')
    }
    stages {
        stage('Sample') {
            steps {
                script {
                    echo "Muneer"
                }
            }
        }
        stage('Deploy ElasticSearch') {
            steps {
                ansiblePlaybook colorized: true, installation: 'Ansible', credentialsId: '0e2e4a1b-17ef-4112-9694-0c87163c4fd8', inventory: 'inventory/ansible_hosts', playbook: 'elk.yml',tags: "elasticsearch"
            }
        }
        stage('Deploy Kibana') {
            steps {
                ansiblePlaybook colorized: true, installation: 'Ansible', credentialsId: '0e2e4a1b-17ef-4112-9694-0c87163c4fd8', inventory: 'inventory/ansible_hosts', playbook: 'elk.yml',tags: "kibana"
            }
        }
        stage('Deploy Filebeat') {
            steps {
                ansiblePlaybook colorized: true, installation: 'Ansible', credentialsId: '0e2e4a1b-17ef-4112-9694-0c87163c4fd8', inventory: 'inventory/ansible_hosts', playbook: 'elk.yml',tags: "filebeat"
            }
        }
    }
}
